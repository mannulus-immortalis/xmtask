// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/mannulus-immortalis/xmtask/internal/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// StorageInt is an autogenerated mock type for the StorageInt type
type StorageInt struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *StorageInt) Close() {
	_m.Called()
}

// CreateItem provides a mock function with given fields: ctx, i
func (_m *StorageInt) CreateItem(ctx context.Context, i *models.ItemCreateRequest) (*uuid.UUID, error) {
	ret := _m.Called(ctx, i)

	if len(ret) == 0 {
		panic("no return value specified for CreateItem")
	}

	var r0 *uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ItemCreateRequest) (*uuid.UUID, error)); ok {
		return rf(ctx, i)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.ItemCreateRequest) *uuid.UUID); ok {
		r0 = rf(ctx, i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.ItemCreateRequest) error); ok {
		r1 = rf(ctx, i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItem provides a mock function with given fields: ctx, id
func (_m *StorageInt) DeleteItem(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetItem provides a mock function with given fields: ctx, id
func (_m *StorageInt) GetItem(ctx context.Context, id uuid.UUID) (*models.ItemResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetItem")
	}

	var r0 *models.ItemResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.ItemResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.ItemResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ItemResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateItem provides a mock function with given fields: ctx, id, i
func (_m *StorageInt) UpdateItem(ctx context.Context, id uuid.UUID, i *models.ItemUpdateRequest) error {
	ret := _m.Called(ctx, id, i)

	if len(ret) == 0 {
		panic("no return value specified for UpdateItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.ItemUpdateRequest) error); ok {
		r0 = rf(ctx, id, i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorageInt creates a new instance of StorageInt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageInt(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageInt {
	mock := &StorageInt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
