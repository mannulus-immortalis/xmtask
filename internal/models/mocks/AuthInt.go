// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// AuthInt is an autogenerated mock type for the AuthInt type
type AuthInt struct {
	mock.Mock
}

// Generate provides a mock function with given fields: roles
func (_m *AuthInt) Generate(roles []string) (string, error) {
	ret := _m.Called(roles)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) (string, error)); ok {
		return rf(roles)
	}
	if rf, ok := ret.Get(0).(func([]string) string); ok {
		r0 = rf(roles)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(roles)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenHasRole provides a mock function with given fields: tokenString, role
func (_m *AuthInt) TokenHasRole(tokenString string, role string) (bool, error) {
	ret := _m.Called(tokenString, role)

	if len(ret) == 0 {
		panic("no return value specified for TokenHasRole")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(tokenString, role)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(tokenString, role)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tokenString, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthInt creates a new instance of AuthInt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthInt(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthInt {
	mock := &AuthInt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
